name: Build and Release

# This workflow runs when a new tag starting with 'v' is pushed.
on:
  push:
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # The 'build' job compiles the application for different operating systems and architectures.
  build:
    name: Build for ${{ matrix.asset_suffix }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Define the different build targets
        include:
          # Linux Builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_suffix: linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_suffix: linux-arm64
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            asset_suffix: linux-x86_32

          # macOS Builds
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_suffix: macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_suffix: macos-arm64

          # Windows Builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_suffix: windows-amd64
          - os: windows-latest
            target: i686-pc-windows-msvc
            asset_suffix: windows-x86_32

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Check-out your repository under $GITHUB_WORKSPACE
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Cache dependencies to speed up future builds
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}

      # 3. Install the Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # 4. Install cross-compilation dependencies for Linux
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" = "i686-unknown-linux-gnu" ]; then
            sudo apt-get update && sudo apt-get install -y gcc-multilib
          fi

      # 5. Build the project in release mode
      - name: Build binary
        shell: bash
        run: |
          # Set the correct linker for Linux cross-compilation
          if [ "${{ runner.os }}" = "Linux" ]; then
            if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            fi
          fi
          cargo build --release --verbose --target ${{ matrix.target }}

      # 6. Package the binary into an archive
      - name: Package Release
        shell: bash
        run: |
          BINARY_NAME="ollama-chat"
          ASSET_FILENAME="ollama-chat-${{ matrix.asset_suffix }}"
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BINARY_NAME+=".exe"
            ASSET_FILENAME+=".zip"
            Compress-Archive -Path "target/${{ matrix.target }}/release/${BINARY_NAME}" -DestinationPath "${ASSET_FILENAME}"
          else
            ASSET_FILENAME+=".tar.gz"
            tar -czvf "${ASSET_FILENAME}" -C "target/${{ matrix.target }}/release/" "${BINARY_NAME}"
          fi
          echo "ASSET_PATH=${ASSET_FILENAME}" >> $GITHUB_ENV

      # 7. Upload the packaged binary as a build artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ollama-chat-builds
          path: ${{ env.ASSET_PATH }}

  # The 'release' job creates a GitHub Release and uploads all the built assets.
  release:
    name: Create GitHub Release
    # This job depends on the 'build' job completing successfully for all matrix targets
    needs: build
    runs-on: ubuntu-latest
    permissions:
      # This permission is required to create a release and upload assets.
      contents: write

    steps:
      # 1. Download all build artifacts from the 'build' job
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ollama-chat-builds
          path: dist/

      # 2. Create the GitHub Release and upload the assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # The files to upload as release assets.
          # This pattern will grab all the packaged files from the dist directory.
          files: dist/*
          # The body of the release. You can use this to write release notes.
          body: "New release of Ollama Chat. Download the binary for your operating system and architecture below."
          # Use the tag name for the release title (e.g., "Release v1.0.0")
          name: Release ${{ github.ref_name }}

